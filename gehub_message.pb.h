/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.9.4 at Wed May 27 14:45:57 2020. */

#ifndef PB_GSCHUB_GEHUB_MESSAGE_PB_H_INCLUDED
#define PB_GSCHUB_GEHUB_MESSAGE_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _gschub_Letter_Type {
    gschub_Letter_Type_Single = 0,
    gschub_Letter_Type_Group = 1,
    gschub_Letter_Type_Ping = 2,
    gschub_Letter_Type_Rename = 3
} gschub_Letter_Type;
#define _gschub_Letter_Type_MIN gschub_Letter_Type_Single
#define _gschub_Letter_Type_MAX gschub_Letter_Type_Rename
#define _gschub_Letter_Type_ARRAYSIZE ((gschub_Letter_Type)(gschub_Letter_Type_Rename+1))

/* Struct definitions */
typedef PB_BYTES_ARRAY_T(16) gschub_Cipher_IV_t;
typedef PB_BYTES_ARRAY_T(16464) gschub_Cipher_data_t;
typedef struct _gschub_Cipher {
    gschub_Cipher_IV_t IV;
    gschub_Cipher_data_t data;
/* @@protoc_insertion_point(struct:gschub_Cipher) */
} gschub_Cipher;

typedef struct _gschub_Client {
    char ID[41];
    char token[65];
    char aliasName[41];
/* @@protoc_insertion_point(struct:gschub_Client) */
} gschub_Client;

typedef struct _gschub_ClientTicket {
    char connID[41];
    char token[65];
/* @@protoc_insertion_point(struct:gschub_ClientTicket) */
} gschub_ClientTicket;

typedef struct _gschub_Data {
    pb_callback_t sender;
    pb_callback_t data;
    int32_t timestamp;
/* @@protoc_insertion_point(struct:gschub_Data) */
} gschub_Data;

typedef PB_BYTES_ARRAY_T(16384) gschub_Letter_data_t;
typedef struct _gschub_Letter {
    gschub_Letter_Type type;
    char receiver[41];
    gschub_Letter_data_t data;
/* @@protoc_insertion_point(struct:gschub_Letter) */
} gschub_Letter;

typedef struct _gschub_PublicKey {
    char E[1024];
    char N[1024];
/* @@protoc_insertion_point(struct:gschub_PublicKey) */
} gschub_PublicKey;

typedef PB_BYTES_ARRAY_T(32) gschub_Reply_HMAC_t;
typedef PB_BYTES_ARRAY_T(16384) gschub_Reply_data_t;
typedef struct _gschub_Reply {
    char sender[41];
    gschub_Reply_HMAC_t HMAC;
    gschub_Reply_data_t data;
    int32_t timestamp;
/* @@protoc_insertion_point(struct:gschub_Reply) */
} gschub_Reply;

typedef PB_BYTES_ARRAY_T(4096) gschub_CipherTicket_ID_t;
typedef struct _gschub_CipherTicket {
    gschub_CipherTicket_ID_t ID;
    gschub_Cipher cipher;
/* @@protoc_insertion_point(struct:gschub_CipherTicket) */
} gschub_CipherTicket;

typedef PB_BYTES_ARRAY_T(4096) gschub_SharedKey_key_t;
typedef struct _gschub_SharedKey {
    gschub_SharedKey_key_t key;
    gschub_Cipher cipher;
/* @@protoc_insertion_point(struct:gschub_SharedKey) */
} gschub_SharedKey;

typedef struct _gschub_Ticket {
    char address[26];
    char secretKey[37];
    gschub_ClientTicket clientTicket;
/* @@protoc_insertion_point(struct:gschub_Ticket) */
} gschub_Ticket;

/* Default values for struct fields */

/* Initializer values for message structs */
#define gschub_PublicKey_init_default            {"", ""}
#define gschub_SharedKey_init_default            {{0, {0}}, gschub_Cipher_init_default}
#define gschub_Cipher_init_default               {{0, {0}}, {0, {0}}}
#define gschub_CipherTicket_init_default         {{0, {0}}, gschub_Cipher_init_default}
#define gschub_Client_init_default               {"", "", ""}
#define gschub_Ticket_init_default               {"", "", gschub_ClientTicket_init_default}
#define gschub_ClientTicket_init_default         {"", ""}
#define gschub_Letter_init_default               {_gschub_Letter_Type_MIN, "", {0, {0}}}
#define gschub_Reply_init_default                {"", {0, {0}}, {0, {0}}, 0}
#define gschub_Data_init_default                 {{{NULL}, NULL}, {{NULL}, NULL}, 0}
#define gschub_PublicKey_init_zero               {"", ""}
#define gschub_SharedKey_init_zero               {{0, {0}}, gschub_Cipher_init_zero}
#define gschub_Cipher_init_zero                  {{0, {0}}, {0, {0}}}
#define gschub_CipherTicket_init_zero            {{0, {0}}, gschub_Cipher_init_zero}
#define gschub_Client_init_zero                  {"", "", ""}
#define gschub_Ticket_init_zero                  {"", "", gschub_ClientTicket_init_zero}
#define gschub_ClientTicket_init_zero            {"", ""}
#define gschub_Letter_init_zero                  {_gschub_Letter_Type_MIN, "", {0, {0}}}
#define gschub_Reply_init_zero                   {"", {0, {0}}, {0, {0}}, 0}
#define gschub_Data_init_zero                    {{{NULL}, NULL}, {{NULL}, NULL}, 0}

/* Field tags (for use in manual encoding/decoding) */
#define gschub_Cipher_IV_tag                     1
#define gschub_Cipher_data_tag                   2
#define gschub_Client_ID_tag                     1
#define gschub_Client_token_tag                  2
#define gschub_Client_aliasName_tag              3
#define gschub_ClientTicket_connID_tag           1
#define gschub_ClientTicket_token_tag            2
#define gschub_Data_sender_tag                   1
#define gschub_Data_data_tag                     2
#define gschub_Data_timestamp_tag                3
#define gschub_Letter_type_tag                   1
#define gschub_Letter_receiver_tag               2
#define gschub_Letter_data_tag                   3
#define gschub_PublicKey_E_tag                   1
#define gschub_PublicKey_N_tag                   2
#define gschub_Reply_sender_tag                  1
#define gschub_Reply_HMAC_tag                    2
#define gschub_Reply_data_tag                    3
#define gschub_Reply_timestamp_tag               4
#define gschub_CipherTicket_ID_tag               1
#define gschub_CipherTicket_cipher_tag           2
#define gschub_SharedKey_key_tag                 1
#define gschub_SharedKey_cipher_tag              2
#define gschub_Ticket_address_tag                1
#define gschub_Ticket_secretKey_tag              2
#define gschub_Ticket_clientTicket_tag           3

/* Struct field encoding specification for nanopb */
extern const pb_field_t gschub_PublicKey_fields[3];
extern const pb_field_t gschub_SharedKey_fields[3];
extern const pb_field_t gschub_Cipher_fields[3];
extern const pb_field_t gschub_CipherTicket_fields[3];
extern const pb_field_t gschub_Client_fields[4];
extern const pb_field_t gschub_Ticket_fields[4];
extern const pb_field_t gschub_ClientTicket_fields[3];
extern const pb_field_t gschub_Letter_fields[4];
extern const pb_field_t gschub_Reply_fields[5];
extern const pb_field_t gschub_Data_fields[4];

/* Maximum encoded size of messages (where known) */
#define gschub_PublicKey_size                    2054
#define gschub_SharedKey_size                    20589
#define gschub_Cipher_size                       16486
#define gschub_CipherTicket_size                 20589
#define gschub_Client_size                       153
#define gschub_Ticket_size                       179
#define gschub_ClientTicket_size                 110
#define gschub_Letter_size                       16433
#define gschub_Reply_size                        16476
/* gschub_Data_size depends on runtime parameters */

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define GEHUB_MESSAGE_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
